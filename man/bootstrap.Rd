% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core.R
\name{bootstrap}
\alias{bootstrap}
\title{bootstrap}
\usage{
bootstrap(estimator, Z, B = 400, blocks = NULL, use_gpu = TRUE)
}
\arguments{
\item{estimator}{a neural estimator}

\item{Z}{either simulated data of length B or a single observed data set, which will be bootstrap sampled B times to generate B bootstrap estimates}

\item{B}{number of bootstrap samples (default 400)}

\item{blocks}{integer vector specifying the blocks in non-parameteric bootstrapping (default \code{NULL}). For example, with 5 replicates, the first two corresponding to block 1 and the remaining three corresponding to block 2, blocks should be \code{c(1, 1, 2, 2, 2)}}

\item{use_gpu}{a boolean indicating whether to use the GPU if it is available (default true)}

\item{parameters}{a single parameter configuration (default \code{NULL})}
}
\value{
p Ã— B matrix, where p is the number of parameters in the model and B is the number of bootstrap samples
}
\description{
Generate bootstrap estimates from an estimator

Parametric bootstrapping is facilitated by passing multiple simulated data set, Z, which should be stored as a list and whose length implicitly defines B.

Non-parametric bootstrapping is facilitated by passing a single data set, Z. The argument \code{blocks} caters for block bootstrapping, and it should be a vector of integers specifying the block for each replicate. For example, with 5 replicates, the first two corresponding to block 1 and the remaining three corresponding to block 2, blocks should be \code{c(1, 1, 2, 2, 2)}. The resampling algorithm aims to produce resampled data sets that are of a similar size to Z, but this can only be achieved exactly if all blocks are equal in length.
}
\examples{
library("NeuralEstimators")
library("JuliaConnectoR")

## Observed data: 100 replicates of a univariate random variable
Z = matrix(rnorm(100), nrow = 1)

## Construct the estimator
estimator <- juliaEval('
  using NeuralEstimators
  using Flux

  p = 2    # number of parameters in the statistical model
  w = 32   # number of neurons in each layer

  psi = Chain(Dense(1, w, relu), Dense(w, w, relu))
  phi = Chain(Dense(w, w, relu), Dense(w, p))
  estimator = DeepSet(psi, phi)
')

## Non-parametric bootstrap
bootstrap(estimator, Z = Z)
bootstrap(estimator, Z = Z, blocks = rep(1:5, each = 20))

## Parametric bootstrap (pretend that the following data generating process
involves simulation from the model given estimated parameters)
B = 400
Z = lapply(1:B, function(b) matrix(rnorm(100), nrow = 1))
bootstrap(estimator, Z = Z)
}
