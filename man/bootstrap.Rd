% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/core.R
\name{bootstrap}
\alias{bootstrap}
\title{bootstrap}
\usage{
bootstrap(
  estimator,
  parameters = NULL,
  Z = NULL,
  simulator = NULL,
  use_gpu = TRUE,
  B = 400,
  blocks = NULL
)
}
\arguments{
\item{estimator}{a neural estimator.}

\item{parameters}{a single parameter configuration (default \code{NULL})

Parametric bootstrapping is facilitated by passing a single parameter configuration, \code{parameters}, and corresponding simulated data, Z, whose length implicitly defines B. Alternatively, one may provide a simulator and the desired sample size, in which case the data will be simulated using simulator(parameters, m).

Non-parametric bootstrapping is facilitated by passing a single data set, Z. The argument blocks caters for block bootstrapping, and it should be a vector of integers specifying the block for each replicate. For example, with 5 replicates, the first two corresponding to block 1 and the remaining three corresponding to block 2, blocks should be \link{1, 1, 2, 2, 2}. The resampling algorithm aims to produce resampled data sets that are of a similar size to Z, but this can only be achieved exactly if all blocks are equal in length.

The keyword argument use_gpu is a flag determining whether to use the GPU, if it is available (default true).}
}
\value{
p Ã— B matrix, where p is the number of parameters in the model.
}
\description{
Generate bootstrap estimates from an estimator.
}
\examples{
library("NeuralEstimators")
library("JuliaConnectoR")

## Observed data: 100 replicates of a univariate random variable
Z = matrix(rnorm(100), nrow = 1)

## Construct the estimator
estimator <- juliaEval('
  using NeuralEstimators
  using Flux

  p = 2    # number of parameters in the statistical model
  w = 32   # number of neurons in each layer

  psi = Chain(Dense(1, w, relu), Dense(w, w, relu))
  phi = Chain(Dense(w, w, relu), Dense(w, p))
  estimator = DeepSet(psi, phi)
')

## Apply the estimator
bootstrap()
}
